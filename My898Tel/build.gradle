apply plugin: 'android'

dependencies {
    compile fileTree(dir: 'libs', include: '*.jar')
    compile project(':Android-SlideExpandableListView')
    compile 'com.android.support:support-v4:20.0.0'
    compile project(':Android-PullToRefresh')
}

android {
    compileSdkVersion 19
    buildToolsVersion '20.0.0'
    defaultConfig {
        applicationId 'com.my898tel'
        minSdkVersion 8
        targetSdkVersion 17
        versionCode 1
        versionName '1.0.0'
    }
    lintOptions {
        abortOnError false
        ignoreWarnings true
    }
    signingConfigs {
        myConfig {
            storeFile file("${getProjectDir()}/keystory/android.keystore")
            keyAlias 'android.keystore'
            keyPassword '123456'
            storePassword '123456'
        }
    }
    productFlavors {
        appRelease {
            applicationId 'com.my898tel'
        }
    }
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }

        // Move the tests to tests/java, tests/res, etc...
        instrumentTest.setRoot('tests')

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }

    buildTypes {
        release {
            runProguard false
            debuggable false
            zipAlign true
            jniDebugBuild false
            signingConfig signingConfigs.myConfig
        }
        debug {
            runProguard false
            debuggable true
            jniDebugBuild true
        }
    }
}



android.applicationVariants.all { variant ->

    variant.processManifest.doLast {
        def projectDir = getProjectDir();

        def flavorsName = variant.productFlavors[0].name
        if (flavorsName.contains("testRelease")) {

        }

        def manifestFile = "${getBuildDir()}/intermediates/manifests/${variant.dirName}/AndroidManifest.xml"

        println "projectDir path===========>" + projectDir

        println "manifestFile path=========>" + manifestFile

        println "variant.dirName path=======>" + variant.dirName
        //修改manifestFile 文件的方法
//        //将字符串UMENG_CHANNEL_VALUE替换成flavor的名字
//        def updatedContent = new File(manifestFile).getText('UTF-8').
//                replaceAll("APP_NAME", app_name).
//                replace("@drawable/testaicon", app_icon).
//                replace("API_KEY", api_key)
//        new File(manifestFile).write(updatedContent, 'UTF-8')
//
//        //将此次flavor的AndroidManifest.xml文件指定为我们修改过的这个文件
//        variant.processResources.manifestFile = file(manifestFile)

    }
}