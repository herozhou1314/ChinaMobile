import com.android.builder.core.DefaultManifestParser

apply plugin: 'com.android.application'

dependencies {
    compile fileTree(dir: 'libs', include: '*.jar')
    compile project(':Android-SlideExpandableListView')
    compile 'com.android.support:support-v4:20.0.0'
    compile project(':Android-PullToRefresh')
}
android {
    compileSdkVersion 19
    buildToolsVersion "21.1.1"
    defaultConfig {
        applicationId 'com.my898tel'
        minSdkVersion 10
        targetSdkVersion 19
        versionCode 1
        versionName '1.0.0'
    }
    lintOptions {
        abortOnError false
        ignoreWarnings true
    }
    signingConfigs {
        myConfig {
            //file(getProjectDir().getParent() + '/yorkit/android.keystore')
            storeFile file("${getProjectDir().getParent()}/keystory/android.keystore")
            keyAlias 'android.keystore'
            keyPassword '123456'
            storePassword '123456'
        }
    }
    productFlavors {
        appRelease {
            applicationId 'com.my898tel'
            versionCode 1
            versionName '1.0.0'
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            debuggable false
            zipAlignEnabled true
            jniDebuggable false
            signingConfig signingConfigs.myConfig
        }
        debug {
            minifyEnabled false
            debuggable true
            jniDebuggable false
            signingConfig signingConfigs.myConfig
        }
    }
    /**资源设置*/
    sourceSets {
        main {
            //jniLibs.srcDirs = ['libs']
        }
    }
}
//替换AndroidManifest.xml的UMENG_CHANNEL_VALUE字符串为渠道名称 By Remex Huang
android.applicationVariants.all { variant ->
    variant.processManifest.doLast {
        //${buildDir}是指build文件夹
        //${variant.dirName}是flavor/buildtype，例如GooglePlay/release，运行时会自动生成
        //下面的路径是类似这样：build/manifests/GooglePlay/release/AndroidManifest.xml
        def manifestFile = "${buildDir}/intermediates/manifests/full/${variant.dirName}/AndroidManifest.xml"
//        def manifestFile = "${buildDir}/manifests/${variant.dirName}/AndroidManifest.xml"
        def brandVersion = variant.buildType.name
        def brandVersionString = brandVersion.toString()
        def flavorName = variant.productFlavors[0].name;
        def appName = "@string/app_name"
        def iconName = "@drawable/ic_launcher"
        def baidu_push_api_key = "sGEAhjuIgpWXK5RnfQf43S09"
        println "brandVersion---->" + variant.buildType + "    " + brandVersionString
        // *** SET APP NAME ***
        if (flavorName.contains("appRelease")) {
            appName = "@string/app_name"
            iconName = "@drawable/ic_launcher"
            baidu_push_api_key = "sGEAhjuIgpWXK5RnfQf43S09"
        } else {
            appName = "@string/app_name"
            iconName = "@drawable/ic_launcher"
            baidu_push_api_key = "sGEAhjuIgpWXK5RnfQf43S09"
        }
        println "...hey you are in the copy task"

        //  println "--->>>" + manifestFile
        //将字符串UMENG_CHANNEL_VALUE替换成flavor的名字
        println "appName-->>" + appName
        def intermediates = new File(manifestFile).getText('UTF-8').replaceAll("BAIDU_PUSH_API_KEY", baidu_push_api_key)
        println "---------------------------------------------------------"


        new File(manifestFile).write(intermediates, 'UTF-8')
        //将此次flavor的AndroidManifest.xml文件指定为我们修改过的这个文件
        variant.processResources.manifestFile = file("${buildDir}/intermediates/manifests/full/${variant.dirName}/AndroidManifest.xml")
        /**包名修改*/
        def versionCode = variant.productFlavors[0].versionCode;
        def versionName = variant.productFlavors[0].versionName;

        println brandVersionString
        /*发布版本才操作*/
        if (brandVersionString.equals("release")) {
            def fileName = null
            def networkVersion = "1.0.0"
            println(flavorName)
            if (flavorName.contains("appRelease")) {
                fileName = flavorName.replace("appRelease",getDate() + "_ChinaMobile_" + versionName + "_(" + versionCode + ")_" + networkVersion + ".apk")
            } else if (flavorName.contains("demoRelease")) {
                fileName = flavorName.replace("Release", "_" +getDate() + "ChinaMobile_" + versionName + "_(" + versionCode + ")_" + networkVersion + ".apk")
            } else {
                fileName = flavorName.replace("appRelease", "_" +getDate() + "ChinaMobile_" + versionName + "_(" + versionCode + ")_" + networkVersion + ".apk")
            }
            //println flavorName
            def file = variant.outputFile
            // println file
            def manifestParser = new DefaultManifestParser()
            def wmgVersionCode = manifestParser.getVersionCode(android.sourceSets.main.manifest.srcFile)
            println wmgVersionCode
            //variant.outputFile = new File(file.parent, file.name.replace("-release.apk", "_" + wmgVersionCode + ".apk"))
            variant.outputFile = new File(file.parent, fileName)
        }
    }
}
/*日期获取和格式化*/

def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMdd')
    return formattedDate
}
